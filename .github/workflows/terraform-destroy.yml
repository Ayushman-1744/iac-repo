name: Terraform Destroy (E2E)

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment to destroy (dev | staging | prod)"
        required: true
        default: "dev"

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      # Step 4: Terraform Init with backend configuration
      - name: Terraform Init
        working-directory: ./infra
        run: |
          terraform init -input=false -reconfigure \
            -backend-config="bucket=astro-1745" \
            -backend-config="key=envs/${{ github.event.inputs.env }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=terraform-lock-table"

      # Step 5: Select/Create Workspace
      - name: Select or Create Workspace
        working-directory: ./infra
        run: terraform workspace select ${{ github.event.inputs.env }} || terraform workspace new ${{ github.event.inputs.env }}

      # Step 6: Terraform Destroy Plan
      - name: Terraform Destroy Plan
        working-directory: ./infra
        run: terraform plan -destroy -var-file=./envs/${{ github.event.inputs.env }}.tfvars -input=false -out=tfplan-destroy-${{ github.event.inputs.env }}

      # Step 7: Terraform Destroy Apply
      - name: Terraform Destroy Apply
        working-directory: ./infra
        run: terraform apply -auto-approve tfplan-destroy-${{ github.event.inputs.env }}

      # Step 8: Cleanup orphaned RDS Subnet Groups (safe deletion)
      - name: Cleanup Orphaned DB Subnet Groups
        run: |
          echo "Checking for orphaned DB subnet groups..."
          SUBNET_GROUPS=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[*].DBSubnetGroupName" --output text)
          if [ -z "$SUBNET_GROUPS" ]; then
            echo "No subnet groups found."
          else
            for subnet_group in $SUBNET_GROUPS; do
              if [[ "$subnet_group" != "default" ]]; then
                echo "Deleting subnet group: $subnet_group"
                aws rds delete-db-subnet-group --db-subnet-group-name "$subnet_group"
              fi
            done
          fi
